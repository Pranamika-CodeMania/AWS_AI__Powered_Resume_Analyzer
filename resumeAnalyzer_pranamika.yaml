# This AWS SAM template has been generated from your function's configuration. If
# your function has one or more triggers, note that the AWS resources associated
# with these triggers aren't fully specified in this template and include
# placeholder values. Open this template in AWS Infrastructure Composer or your
# favorite IDE and modify it to specify a serverless application with other AWS
# resources.
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: An AWS Serverless Application Model template describing your function.
Resources:
  resumeAnalyzerpranamika:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Description: ''
      MemorySize: 128
      Timeout: 63
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      EphemeralStorage:
        Size: 512
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 21600
        MaximumRetryAttempts: 2
      PackageType: Zip
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
              Resource: >-
                arn:aws:bedrock:us-west-2::foundation-model/anthropic.claude-v2:1
            - Sid: VisualEditor0
              Effect: Allow
              Action:
                - comprehend:DetectSentiment
                - comprehend:DetectEntities
                - comprehend:DetectSyntax
                - comprehend:DetectKeyPhrases
              Resource: '*'
            - Sid: VisualEditor0
              Effect: Allow
              Action:
                - textract:DetectDocumentText
              Resource: '*'
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource:
                - !GetAtt Bucket1.Arn
            - Sid: AmazonLexFullAccessStatement1
              Effect: Allow
              Action:
                - cloudwatch:GetMetricStatistics
                - cloudwatch:DescribeAlarms
                - cloudwatch:DescribeAlarmsForMetric
                - kms:DescribeKey
                - kms:ListAliases
                - lambda:GetPolicy
                - lambda:ListFunctions
                - lex:*
                - polly:DescribeVoices
                - polly:SynthesizeSpeech
                - kendra:ListIndices
                - iam:ListRoles
                - s3:ListAllMyBuckets
                - logs:DescribeLogGroups
                - s3:GetBucketLocation
              Resource:
                - '*'
            - Sid: AmazonLexFullAccessStatement2
              Effect: Allow
              Action:
                - lambda:AddPermission
                - lambda:RemovePermission
              Resource: arn:aws:lambda:*:*:function:AmazonLex*
              Condition:
                StringEquals:
                  lambda:Principal: lex.amazonaws.com
            - Sid: AmazonLexFullAccessStatement3
              Effect: Allow
              Action:
                - iam:GetRole
              Resource:
                - >-
                  arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots
                - >-
                  arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels
                - >-
                  arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*
                - >-
                  arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*
                - >-
                  arn:aws:iam::*:role/aws-service-role/replication.lexv2.amazonaws.com/AWSServiceRoleForLexV2Replication*
            - Sid: AmazonLexFullAccessStatement4
              Effect: Allow
              Action:
                - iam:CreateServiceLinkedRole
              Resource:
                - >-
                  arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots
              Condition:
                StringEquals:
                  iam:AWSServiceName: lex.amazonaws.com
            - Sid: AmazonLexFullAccessStatement5
              Effect: Allow
              Action:
                - iam:CreateServiceLinkedRole
              Resource:
                - >-
                  arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels
              Condition:
                StringEquals:
                  iam:AWSServiceName: channels.lex.amazonaws.com
            - Sid: AmazonLexFullAccessStatement6
              Effect: Allow
              Action:
                - iam:CreateServiceLinkedRole
              Resource:
                - >-
                  arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*
              Condition:
                StringEquals:
                  iam:AWSServiceName: lexv2.amazonaws.com
            - Sid: AmazonLexFullAccessStatement7
              Effect: Allow
              Action:
                - iam:CreateServiceLinkedRole
              Resource:
                - >-
                  arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*
              Condition:
                StringEquals:
                  iam:AWSServiceName: channels.lexv2.amazonaws.com
            - Sid: AmazonLexFullAccessStatement8
              Effect: Allow
              Action:
                - iam:CreateServiceLinkedRole
              Resource:
                - >-
                  arn:aws:iam::*:role/aws-service-role/replication.lexv2.amazonaws.com/AWSServiceRoleForLexV2Replication*
              Condition:
                StringEquals:
                  iam:AWSServiceName: replication.lexv2.amazonaws.com
            - Sid: AmazonLexFullAccessStatement9
              Effect: Allow
              Action:
                - iam:DeleteServiceLinkedRole
                - iam:GetServiceLinkedRoleDeletionStatus
              Resource:
                - >-
                  arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots
                - >-
                  arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels
                - >-
                  arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*
                - >-
                  arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*
                - >-
                  arn:aws:iam::*:role/aws-service-role/replication.lexv2.amazonaws.com/AWSServiceRoleForLexV2Replication*
            - Sid: AmazonLexFullAccessStatement10
              Effect: Allow
              Action:
                - iam:PassRole
              Resource:
                - >-
                  arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots
              Condition:
                StringEquals:
                  iam:PassedToService:
                    - lex.amazonaws.com
            - Sid: AmazonLexFullAccessStatement11
              Effect: Allow
              Action:
                - iam:PassRole
              Resource:
                - >-
                  arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*
              Condition:
                StringEquals:
                  iam:PassedToService:
                    - lexv2.amazonaws.com
            - Sid: AmazonLexFullAccessStatement12
              Effect: Allow
              Action:
                - iam:PassRole
              Resource:
                - >-
                  arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*
              Condition:
                StringEquals:
                  iam:PassedToService:
                    - channels.lexv2.amazonaws.com
            - Sid: AmazonLexFullAccessStatement13
              Effect: Allow
              Action:
                - iam:PassRole
              Resource:
                - >-
                  arn:aws:iam::*:role/aws-service-role/replication.lexv2.amazonaws.com/AWSServiceRoleForLexV2Replication*
              Condition:
                StringEquals:
                  iam:PassedToService:
                    - lexv2.amazonaws.com
            - Effect: Allow
              Action:
                - s3:Get*
                - s3:List*
                - s3:Describe*
                - s3-object-lambda:Get*
                - s3-object-lambda:List*
              Resource: '*'
            - Effect: Allow
              Action:
                - cloudformation:DescribeStacks
                - cloudformation:ListStackResources
                - cloudwatch:ListMetrics
                - cloudwatch:GetMetricData
                - ec2:DescribeSecurityGroups
                - ec2:DescribeSubnets
                - ec2:DescribeVpcs
                - kms:ListAliases
                - iam:GetPolicy
                - iam:GetPolicyVersion
                - iam:GetRole
                - iam:GetRolePolicy
                - iam:ListAttachedRolePolicies
                - iam:ListRolePolicies
                - iam:ListRoles
                - lambda:*
                - logs:DescribeLogGroups
                - states:DescribeStateMachine
                - states:ListStateMachines
                - tag:GetResources
                - xray:GetTraceSummaries
                - xray:BatchGetTraces
              Resource: '*'
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource: '*'
              Condition:
                StringEquals:
                  iam:PassedToService: lambda.amazonaws.com
            - Effect: Allow
              Action:
                - logs:DescribeLogStreams
                - logs:GetLogEvents
                - logs:FilterLogEvents
                - logs:StartLiveTail
                - logs:StopLiveTail
              Resource: arn:aws:logs:*:*:log-group:/aws/lambda/*
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
              Resource: arn:aws:logs:us-west-2:124355655208:*
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - >-
                  arn:aws:logs:us-west-2:124355655208:log-group:/aws/lambda/resumeAnalyzer_pranamika:*
      RecursiveLoop: Terminate
      SnapStart:
        ApplyOn: None
      Events:
        BucketEvent1:
          Type: S3
          Properties:
            Bucket:
              Ref: Bucket1
            Events:
              - s3:ObjectCreated:*
        Api1:
          Type: Api
          Properties:
            Path: /resume
            Method: POST
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto
  Bucket1:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  BucketPolicy1:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: Bucket1
      PolicyDocument:
        Statement:
          - Action: s3:*
            Effect: Deny
            Principal: '*'
            Resource:
              - arn:aws:s3:::Bucket1/*
              - arn:aws:s3:::Bucket1
            Condition:
              Bool:
                aws:SecureTransport: false
